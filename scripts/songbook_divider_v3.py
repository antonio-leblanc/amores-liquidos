#!/usr/bin/env python3
"""
Script V3 para dividir o songbook usando os n√∫meros das p√°ginas do √≠ndice.
Agora pega o conte√∫do REAL das m√∫sicas, n√£o apenas os t√≠tulos.
"""

import re
import os
from pathlib import Path
from collections import defaultdict

def clean_song_name(song_name):
    """Converte nome da m√∫sica para formato de arquivo v√°lido."""
    # Remove caracteres especiais e substitui espa√ßos por underscore
    cleaned = re.sub(r'[^\w\s-]', '', song_name)
    cleaned = re.sub(r'\s+', '_', cleaned.strip())
    return cleaned.lower()

def parse_index(text):
    """Extrai o √≠ndice e mapeia as m√∫sicas √∫nicas com n√∫meros das p√°ginas."""
    lines = text.split('\n')
    
    # Encontrar onde come√ßa o sum√°rio
    index_start = -1
    for i, line in enumerate(lines):
        if 'Sum√°rio' in line or '√çndice' in line:
            index_start = i
            break
    
    if index_start == -1:
        print("‚ùå Sum√°rio n√£o encontrado!")
        return {}
    
    # Extrair linhas do √≠ndice (at√© encontrar uma linha vazia ou fim)
    index_lines = []
    for i in range(index_start + 1, len(lines)):
        line = lines[i].strip()
        if not line or line.startswith('Songbook') or line.startswith('Amores'):
            break
        if line and any(char.isdigit() for char in line):  # Linha com n√∫mero de p√°gina
            index_lines.append(line)
    
    print(f"üìã Encontradas {len(index_lines)} entradas no √≠ndice")
    
    # Parsear cada linha do √≠ndice
    songs_map = defaultdict(list)
    
    for line in index_lines:
        # Padr√£o: "Nome da M√∫sica (Instrumento)        N√∫mero"
        # Exemplo: "100 % Voc√™ (Alto Sax)        5"
        match = re.match(r'^(.+?)\s*\(([^)]+)\)\s+(\d+)$', line)
        if match:
            song_name = match.group(1).strip()
            instrument = match.group(2).strip()
            page_num = int(match.group(3))
            
            # Normalizar nome da m√∫sica (remover acentos, case-insensitive)
            normalized_name = re.sub(r'[^\w\s]', '', song_name.lower())
            normalized_name = re.sub(r'\s+', ' ', normalized_name).strip()
            
            songs_map[normalized_name].append({
                'original_name': song_name,
                'instrument': instrument,
                'page': page_num
            })
    
    print(f"üéµ Encontradas {len(songs_map)} m√∫sicas √∫nicas:")
    for song, instruments in list(songs_map.items())[:5]:
        print(f"  - {song}: {len(instruments)} instrumentos (p√°ginas: {[i['page'] for i in instruments]})")
    if len(songs_map) > 5:
        print(f"  ... e mais {len(songs_map) - 5} m√∫sicas")
    
    return songs_map

def find_content_by_page_number(text, page_number):
    """Encontra o conte√∫do real de uma m√∫sica baseado no n√∫mero da p√°gina."""
    lines = text.split('\n')
    
    # Procurar por linhas que contenham o n√∫mero da p√°gina
    # O conte√∫do geralmente vem logo ap√≥s o n√∫mero da p√°gina
    content_start = -1
    
    for i, line in enumerate(lines):
        # Procurar por padr√µes que indiquem in√≠cio de conte√∫do
        if (str(page_number) in line and 
            ('(' in line or ')' in line or 'Estrutura' in line or 
             any(note in line for note in ['Do', 'Re', 'Mi', 'Fa', 'Sol', 'La', 'Si']))):
            content_start = i
            break
    
    if content_start == -1:
        # Fallback: procurar por qualquer linha com o n√∫mero da p√°gina
        for i, line in enumerate(lines):
            if str(page_number) in line and len(line.strip()) > 0:
                content_start = i
                break
    
    return content_start

def extract_song_content_by_pages(text, song_info):
    """Extrai o conte√∫do de uma m√∫sica baseado nos n√∫meros das p√°ginas."""
    lines = text.split('\n')
    
    # Pegar a primeira p√°gina (menor n√∫mero) como in√≠cio
    first_page = min(instrument['page'] for instrument in song_info['instruments'])
    
    # Encontrar onde come√ßa o conte√∫do real
    content_start = find_content_by_page_number(text, first_page)
    
    if content_start == -1:
        print(f"  ‚ö†Ô∏è N√£o encontrou conte√∫do para p√°gina {first_page}")
        return ""
    
    # Encontrar onde termina (pr√≥xima m√∫sica ou fim do arquivo)
    content_end = len(lines)
    
    # Procurar pela pr√≥xima m√∫sica (linha com nome + instrumento)
    for i in range(content_start + 1, len(lines)):
        line = lines[i].strip()
        # Se encontrar outra m√∫sica (n√£o da mesma), para aqui
        if line and re.match(r'^[A-Za-z][^\(]*\s*\([^)]+\)', line):
            # Verificar se n√£o √© da mesma m√∫sica
            if not any(instrument['original_name'] in line for instrument in song_info['instruments']):
                content_end = i
                break
    
    # Extrair conte√∫do
    song_lines = lines[content_start:content_end]
    return '\n'.join(song_lines)

def divide_songbook_v3(input_file, output_dir):
    """Divide o songbook usando os n√∫meros das p√°ginas do √≠ndice."""
    
    # Criar diret√≥rio de sa√≠da
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # Ler arquivo de entrada
    print(f"üìñ Lendo arquivo: {input_file}")
    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Parsear √≠ndice
    print("üîç Parseando √≠ndice...")
    songs_map = parse_index(content)
    
    if not songs_map:
        print("‚ùå N√£o foi poss√≠vel parsear o √≠ndice!")
        return
    
    # Dividir em arquivos individuais
    print("\nüìù Dividindo em arquivos individuais...")
    
    success_count = 0
    error_count = 0
    
    for normalized_name, instruments in songs_map.items():
        # Criar nome do arquivo usando o nome original
        original_name = instruments[0]['original_name']
        filename = clean_song_name(original_name) + '.txt'
        filepath = output_path / filename
        
        print(f"\nüéµ Processando: {original_name}")
        print(f"  üìÑ P√°ginas: {[i['page'] for i in instruments]}")
        
        # Extrair conte√∫do real da m√∫sica
        song_info = {
            'original_name': original_name,
            'instruments': instruments
        }
        
        song_content = extract_song_content_by_pages(content, song_info)
        
        if song_content and len(song_content.strip()) > 50:  # Conte√∫do m√≠nimo
            # Salvar arquivo
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(song_content)
            
            instruments_count = len(instruments)
            print(f"  ‚úÖ {filename} ({instruments_count} instrumentos, {len(song_content.split())} linhas)")
            success_count += 1
        else:
            print(f"  ‚ùå Conte√∫do insuficiente ou n√£o encontrado")
            error_count += 1
    
    print(f"\nüéâ Divis√£o conclu√≠da!")
    print(f"  ‚úÖ Sucessos: {success_count}")
    print(f"  ‚ùå Erros: {error_count}")

def main():
    """Fun√ß√£o principal."""
    input_file = "raw_songbook/Songbook Amores L√≠quidos Atualizado 07.11.24.docx.txt"
    output_dir = "divided_songs"
    
    if not os.path.exists(input_file):
        print(f"‚ùå Arquivo n√£o encontrado: {input_file}")
        return
    
    try:
        divide_songbook_v3(input_file, output_dir)
    except Exception as e:
        print(f"‚ùå Erro durante a divis√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
